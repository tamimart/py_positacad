#| label: 'setup'
#| include: false
# Import your packages here
import pandas as pd
from matplotlib import rcParams
# Set some options
pd.set_option('mode.copy_on_write', True)
pd.set_option('display.max_columns', None)
rcParams.update({'savefig.bbox': 'tight'}) # Keeps plotnine legend from being cut off
#| label: 'recreation-import'
covid = pd.read_csv('data/covid.csv')
covid
#| label: 'recreate-this'
#| message: false
solution = pd.read_csv('data/milestone03.csv')
solution
help(pd.DataFrame.cumsum)
#| label: 'recreation-create'
subset = covid.loc[covid['state'] == 'NY']
subset['cumul_cases'] = subset['cases'].cumsum()
subset['cumul_deaths'] = subset['deaths'].cumsum()
subset
#| label: 'compare'
# If your answer is correct, the comparison should return an empty DataFrame.
subset.reset_index(drop=True).compare(solution)
#| label: 'millions'
subset['cumul_cases_millions'] = subset['cumul_cases'] / 1000000
subset['cumul_deaths_millions'] = subset['cumul_deaths'] / 1000000
subset
#| label: 'recreation-visualize'
# Remember that all required packages have already been installed for you,
# but you will need to import the ones you want to use. As a best practice when
# working within a Quarto document like this one, import any packages you
# need within the code chunk labeled `setup` at the top of the file.
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime,theme_classic, labs, theme, element_text
from mizani.breaks import date_breaks
from mizani.formatters import date_format
(
ggplot(subset, aes(y='cumul_cases_millions', x='date')) +
geom_line(group=1) +
theme_classic() +
scale_x_datetime(breaks=date_breaks("1 months"), labels=date_format("%m-%Y")) +
labs(title='Cumulative covid cases', y='Millions of cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime,theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', color='state'), group=1)+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', color='state'), group=1)+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', color='state'))+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', group='state'))+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', group='state', color='state'))+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', group='state', color='state'))+
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
sum_deaths_ordered = covid.
groupby('state').
sum('deaths').
sort_values('deaths', ascending=False)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', group='state', color='state')) +
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
)
#| label: 'extension'
# What is the pattern from deaths-cases ratio on time for the top six states with more deaths?
import plotnine as p9
from plotnine import ggplot, aes, geom_line, scale_x_datetime, theme_classic, labs, theme, element_text, facet_wrap
from mizani.breaks import date_breaks
from mizani.formatters import date_format
covid = pd.read_csv('data/covid.csv')
# which six states had more deaths?
sum_deaths_ordered = covid. \
groupby('state'). \
sum('deaths'). \
sort_values('deaths', ascending=False)
# get the six state list
top_six = sum_deaths_ordered.head(6).index.values.tolist()
# filter
covid = covid.loc[covid.state.isin(top_six)]
# remove NA and negative values
covid = covid.dropna()
subset = covid.loc[(covid['deaths'] >= 0) & (covid['cases'] >= 0)]
# create new column = deaths/cases ratio
subset['cases_death_ratio'] = (subset['deaths'] / subset['cases'])
subset['state'] = pd.Categorical(subset['state'], categories=top_six, ordered=True)
# plot
(
ggplot(subset, aes(x='date')) +
geom_line(aes(y='cases_death_ratio', group='state', color='state')) +
facet_wrap('state') +
theme_classic() +
scale_x_datetime(breaks=date_breaks("3 months"), labels=date_format("%m-%Y")) +
labs(y='Deaths/Cases', x='Date') +
theme(
axis_text_x = element_text(rotation=45)
)
).show()
