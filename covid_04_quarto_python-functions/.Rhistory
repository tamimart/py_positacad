#| label: 'setup'
#| include: false
# Import your packages here
import numpy as np
import pandas as pd
from matplotlib import rcParams
# Set some options
pd.set_option('mode.copy_on_write', True)
pd.set_option('display.max_columns', None)
rcParams.update({'savefig.bbox': 'tight'}) # Keeps plotnine legend from being cut off
def bin_var(var, var_median):
if var > var_median:
return 'High'
else:
return 'Low'
bin_var_vec = np.vectorize(bin_var)
covid['cases_category'] = bin_var_vec(covid['cases'], covid['cases'].median())
covid['deaths_category'] = bin_var_vec(covid['deaths'], covid['deaths'].median())
# Categorize variable with 'high' and 'low' values, above and below variable median
import pandas as pd
covid = pd.read_csv("data/covid_dates_split.csv")
covid['cases'].describe()
covid['cases'].median()
cases_median = covid['cases'].median()
def bin_var(var, var_median):
if var > var_median:
return 'High'
else:
return 'Low'
bin_var_vec = np.vectorize(bin_var)
covid['cases_category'] = bin_var_vec(covid['cases'], covid['cases'].median())
covid['deaths_category'] = bin_var_vec(covid['deaths'], covid['deaths'].median())
# can I create a function that calculates something for the number and for the Series at the same time?
#| label: 'extension'
import pandas as pd
import plotnine as p9
from mizani.breaks import date_breaks
covid = pd.read_csv("data/covid_dates_split.csv")
covid.dropna()
# calculate cases/test ratio
covid['positive_diag'] = covid['cases'] / covid['tests']
# transform it to percentage
covid['positive_diag'] = covid['positive_diag'].apply(lambda x: x * 100)
# top ten states with higher positive diagnosis median
top_ten_positive_diag = covid.groupby(['state']).positive_diag.median().sort_values(ascending=False).head(10).index.values.tolist()
# filter df with top ten states
subset = covid.loc[covid['state'].isin(top_ten_positive_diag)]
#subset = subset.loc[subset['positive_diag'] < 4000]
# plot positive diagnosis on time
(
p9.ggplot(subset, p9.aes(x='date', y='positive_diag')) +
p9.geom_line(p9.aes(color='state'), group=1) +
p9.facet_wrap('state', nrow=2, ncol=5) +
p9.theme_classic() +
p9.scale_x_datetime(breaks=date_breaks("6 months"))
) + p9.theme(
axis_text_x = p9.element_text(rotation=45)
)
#| include: false
# Can I get help for python functions inside Rstudio?
help(pd.set_option)
#| label: 'setup'
# Import your packages here
import pandas as pd
# Set a display option so all columns of tables are displayed
pd.set_option('display.max_columns', None)
