#| label: 'setup'
#| include: false
# Import your packages here
import pandas as pd
from matplotlib import rcParams
# Set some options
pd.set_option('mode.copy_on_write', True)
pd.set_option('display.max_columns', None)
rcParams.update({'savefig.bbox': 'tight'})
subset = covid.loc[covid['state'] == 'NY']
subset['deaths'].sum()
#| label: 'recreation-import'
covid = pd.read_csv("data/covid.csv")
subset = covid.loc[covid['state'] == 'NY']
subset['deaths'].sum()
#| label: 'solution'
solution = pd.read_csv('data/milestone05.csv')
solution
#| label: 'recreation-summary'
(
cases_deaths = covid.groupby('state').agg({
'cases' : 'sum',
'deaths' : 'sum'
}).nlargest(10, 'deaths').reset_index()
)
#| label: 'compare'
# If your answer is correct, the comparison should return an empty DataFrame.
cases_deaths.reset_index(drop=True).compare(solution)
#| label: 'recreation-visualize'
import plotnine as p9
(
ggplot(cases_deaths, aes(x='state', y='deaths'))
+ geom_bar()
+ label(x='Deaths', y='State')
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_bar()
+ p9.label(x='Deaths', y='State')
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_bar()
+ p9.labs(x='Deaths', y='State')
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_bar()
+ p9.labs(x='Deaths', y='State').plot_show()
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_bar()
+ p9.labs(x='Deaths', y='State')
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_col()
+ p9.labs(x='Deaths', y='State')
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_col()
+ p9.labs(x='Deaths', y='State').plot_show()
)
#| label: 'recreation-visualize'
import plotnine as p9
(
p9.ggplot(cases_deaths, p9.aes(x='state', y='deaths'))
+ p9.geom_col()
+ p9.labs(x='Deaths', y='State')
)
reticulate::repl_python()
