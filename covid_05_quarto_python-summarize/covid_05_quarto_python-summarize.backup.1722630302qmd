---
title: Group and summarize data
format: html
---

```{python}
#| label: 'setup'
#| include: false

# Import your packages here
import pandas as pd
from matplotlib import rcParams


# Set some options
pd.set_option('mode.copy_on_write', True)
pd.set_option('display.max_columns', None)
rcParams.update({'savefig.bbox': 'tight'})
```

## Summarize data

In this milestone, you'll use groupwise summaries to compute the total deaths for each state and then plot the results for the states with the highest values.


## Recreation

### Part 1 - Import

Before you begin, you will need to import the `covid` data set.
Use the code chunk below to read the data from the data file `covid.csv`,
which is stored in the `data/` folder in your working directory.
Be sure to save the data set to a variable named `covid`.


```{python}
#| label: 'recreation-import'

import pandas as pd

covid = pd.read_csv('data/covid.csv')
```

### Compute total deaths

Run the code below to compute the total deaths for the state of New York.


```{python unnamed-chunk-4}
subset = covid.loc[covid['state'] == 'NY']
subset['deaths'].sum()
```

### Part 3 - Summarize data

Now, you'll compute the total deaths for each state.
Run the code below to see a table.


```{python}
#| label: 'solution'
solution = pd.read_csv('data/milestone05.csv')
solution
```

Your task is to use what you've learned about functions and grouped summaries to transform `covid` into this table.

You will need to:

1. Group the data
2. Summarize the total cases and total deaths for each group
3. Use `.nlargest()` to find the top ten states with the highest number of total deaths

Work in the code chunk below. Save the result as `cases_deaths`. We will use the result in Part 4.


```{python}
#| label: 'recreation-summary'

cases = covid.groupby(['state']).cases.sum()
deaths = covid.groupby(['state']).deaths.sum()

subset = pd.concat([cases, deaths], axis=1, ignore_index=True)

type(subset)

cases_deaths = subset['deaths'].nlargest(10)
```

Run the following code chunk to test whether your table matches the solution:


```{python}
#| label: 'compare'

# If your answer is correct, the comparison should return an empty DataFrame.
cases_deaths.reset_index(drop=True).compare(solution)
```

### Part 4 - Visualize it

Finally, use the new `cases_deaths` data to recreate the plot below.

![](images/milestone05.png)


```{python}
#| label: 'recreation-visualize'

```

## Extension

As an optional final extension, create a Quarto report summarizing the work done in your previous milestones, either with the project data or your own data.

In this report, include:

1. Some text about the data and your goals in data exploration
2. A small table and/or data visualization(s)
3. A short block of text that explains the figure *and* makes use of some of the text styling available within Quarto

**See an example Quarto report [here](https://rsacdn.link/milestones/internal/covid/assets/covid_report.html){target="_blank" rel="noopener noreferrer"}.**

